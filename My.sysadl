Model SysADLArchitecture;
package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
}
Requirement ControlRoomTemperatureFR ( 1 ) {
	text =
	"\"The controller must be capable to maintain the temperature in the room\""
	Requirement DefineTemperatureFR ( 1.2 ) {
		text =
		"\"The controller must define the target temperature considering the presence of the user and the desired temperature\""
	}
	Requirement MonitorTemperatureFR ( 1.1 ) {
		text =
		"\"The controller must receive data from all local temperature sensors and calculate the average temperature\""
	}
	Requirement CommandHeaterAndCoolerFR ( 1.3 ) {
		text =
		"\"The controller must set the appropriate command to turn the heater or the cooler on in order to increase or decrease temperature\""
	}
}
Requirement SetDesiredTemperatureFR ( 1.5 ) {
	text =
	"\"The system must allow the user set the desired temperature in Celsius\""
	derive ControlRoomTemperatureFR.DefineTemperatureFR;
}
Requirement ProvideLocalTemperatureFR ( 1.4 ) {
	text =
	"\"The system shall use connected sensors to get the temperature of room\""
}
Requirement DecideTargetTemperatureFR ( 1.7 ) {
	text =
	"\"The controller must maintain the desired temperature if there is a person in the room or it must set temperature to 22 Celsius when there is nobody in the room\""
}
Requirement VerifyPresenceFR ( 1.6 ) {
	text =
	"\"The controller must receive data from a presence sensorto verify if there is someone in the room\""
}
Requirement IncreaseTemperatureFR ( 1.8 ) {
	text =
	"\"The controller must turn the heater on and the cooler off to increase temperature\""
}
Requirement DecreaseTemperatureFR ( 1.9 ) {
	text =
	"\"The controller must turn the cooler on and the heater off to decrease temperature\""
}
Requirement QualifyNFR ( 2 ) {
	text =
	"\"The system must satisfy the modifiability, scalability, availability, and accuracy concerns\""
}
Requirement ModifiabilityNFR ( 2.1 ) {
	text = "\"The system must low the cost modification\""
}
Requirement ScalabilityNFR ( 2.2 ) {
	text =
	"\"The system must allow the expansion of its capacity to monitor several room\""
}
Requirement AvailabilityNFR ( 2.3 ) {
	text = "\"The system must be in operation all the time\""
}
Requirement AccuracyNFR ( 2.4 ) {
	text =
	"\"The instalation must have at least two temperature sensors and one presence sensor\""
}
Requirement ModifyTemperatureSensorNFR ( 2.6 ) {
	text =
	"\"The system must allow the modification of the temperature sensors to improve temperature measures\""
}
Requirement FaultToleranceFR ( 2.5 ) {
	text = "\"The system must allow the user set desired temperature in Celsius\""
}
package DimensionUnits {
	dimension Temperature unit Celsius {
		dimension = Temperature } unit Fahrenheit {
			dimension = Temperature }
		}
		package ValueTypes {
			import DimensionUnits;
			import SysADL.types;
			value type Temperature {
				dimension = DimensionUnits.Temperature
			}
			datatype Commands {
			attributes Heater : Command Cooler : Command
			}
			value type FahrenheitTemperature extends Temperature {
				unit = DimensionUnits.Fahrenheit dimension = DimensionUnits.Temperature
			}
			value type CelsiusTemperature extends Temperature {
				unit = DimensionUnits.Celsius dimension = DimensionUnits.Temperature
			}
		enum Command {
				On, Off
			}
		}
		package Components {
		import ValueTypes;
			import Ports;
			import SysADL.types;
			boundary component def UserInterfaceCP {
				ports desired : Ports.FTemperatureOPT {
				}
			}
			boundary component def HeaterCP {
				ports controller : Ports.CommandIPT {
				}
			}
			boundary component def CoolerCP {
				ports controller : Ports.CommandIPT {
				}
			}
			boundary component def TemperatureSensorCP {
				ports current : Ports.CTemperatureOPT {
				}
			}
			boundary component def PresenceSensorCP {
				ports detected : Ports.PresenceOPT {
				}
			}
			component def ARCH1 {
			configuration {
				}
			}
			component def PresenceCheckerCP {
			}
			component def SensorMonitorCP {
			}
			component def CommanderCP {
			}
		component def RoomTemperatureControllerCP {
				configuration {
				}
			}
			activity def CalculateAverageTemperatureAC ( t1 :
			ValueTypes.CelsiusTemperature, t2 : ValueTypes.CelsiusTemperature ) : (
			averageTemperature : ValueTypes.CelsiusTemperature ) {
				body {
				actions : CalculateAverageTemperatureAN : CalculateAverageTemperatureAN {
						using pins t1 : ValueTypes.CelsiusTemperature t2 :
						ValueTypes.CelsiusTemperature
					}
					delegate averageTemperature to CalculateAverageTemperatureAN delegate t1
					to CalculateAverageTemperatureAN.t1 delegate t2 to
					CalculateAverageTemperatureAN.t2
				}
			}
			activity def CheckPresenceToSetTemperatureAC ( presence :
			SysADL.types.Boolean, desiredTemperature : ValueTypes.CelsiusTemperature ) :
			( targetTemperature : ValueTypes.CelsiusTemperature ) {
				body {
				actions : CheckPresenceToSetTemperatureAN : CheckPresenceToSetTemperatureAN
					{
						using pins desiredTemperature : ValueTypes.CelsiusTemperature presence :
						SysADL.types.Boolean
					}
					delegate presence to CheckPresenceToSetTemperatureAN.presence delegate
					desiredTemperature to CheckPresenceToSetTemperatureAN.desiredTemperature
					delegate targetTemperature to CheckPresenceToSetTemperatureAN
				}
			}
			activity def DecideCommandAC ( averageTemp : ValueTypes.CelsiusTemperature,
			targetTemp : ValueTypes.CelsiusTemperature ) : ( cool : ValueTypes.Command,
			heat : ValueTypes.Command ) {
				body {
				actions : DecideCommandAN : DecideCommandAN {
						using pins targetTemp : ValueTypes.CelsiusTemperature averageTemp :
						ValueTypes.CelsiusTemperature
					}
					CommandHeaterAN : CommandHeaterAN {
						using pins cmds : ValueTypes.Commands
					}
					CommandCoolerAN : CommandCoolerAN {
						using pins cmds : ValueTypes.Commands
					}
					delegate averageTemp to DecideCommandAN.averageTemp 
				delegate  cool to CommandCoolerAN delegate heat to CommandHeaterAN delegate
					targetTemp to DecideCommandAN.targetTemp flow from DecideCommandAN to
					CommandCoolerAN.cmds flow from DecideCommandAN to CommandHeaterAN.cmds
				}
			}
			activity def FahrenheitToCelsiusAC ( f : ValueTypes.FahrenheitTemperature )
			: ( c : ValueTypes.CelsiusTemperature ) {
				body {
				actions : FahrenheitToCelsiusAN : FahrenheitToCelsiusAN {
						using pins f : ValueTypes.FahrenheitTemperature
					}
					delegate f to FahrenheitToCelsiusAN.f delegate c to FahrenheitToCelsiusAN
				}
			}
			action def CalculateAverageTemperatureAN ( t1 :
			ValueTypes.CelsiusTemperature, t2 : ValueTypes.CelsiusTemperature ) :
			ValueTypes.CelsiusTemperature {
			post-condition CalculateAverageTemperatureEQ ( ) delegate t1 to
				CalculateAverageTemperatureEQ.t1 delegate t2 to
				CalculateAverageTemperatureEQ.t2 delegate CalculateAverageTemperatureAN to
				CalculateAverageTemperatureEQ.averageTemperature
			}
			constraint CalculateAverageTemperatureEQ ( t1 :
			ValueTypes.CelsiusTemperature, t2 : ValueTypes.CelsiusTemperature ) : (
			averageTemperature : ValueTypes.CelsiusTemperature ) {
				equation = averageTemperature == (t1+t2)/2
			}
		action def CheckPresenceToSetTemperatureAN ( presence : SysADL.types.Boolean,
			desiredTemperature : ValueTypes.CelsiusTemperature ) :
			ValueTypes.CelsiusTemperature {
			post-condition CheckPresenceToSetTemperatureEQ ( )
			}
			action def DecideCommandAN ( averageTemp : ValueTypes.CelsiusTemperature,
			targetTemp : ValueTypes.CelsiusTemperature ) : ValueTypes.Commands {
			post-condition DecideCommandEQ ( )
			delegate DecideCommandAN to DecideCommandEQ.cmds delegate averageTemp to
				DecideCommandEQ.averageTemp delegate targetTemp to
				DecideCommandEQ.targetTemp
			}
			action def FahrenheitToCelsiusAN ( f : ValueTypes.FahrenheitTemperature ) :
			ValueTypes.CelsiusTemperature {
			post-condition FahrenheitToCelsiusEQ ( ) delegate f to
				FahrenheitToCelsiusEQ.f delegate FahrenheitToCelsiusAN to
				FahrenheitToCelsiusEQ.c
			}
		constraint CheckPresenceToSetTemperatureEQ ( presence : SysADL.types.Boolean,
			desiredTemperature : ValueTypes.CelsiusTemperature ) : ( targetTemperature :
			ValueTypes.CelsiusTemperature ) {
				 equation = presence == true ? targetTemperature == desiredTemperature : targetTemperature == 22
			}
		constraint DecideCommandEQ ( averageTemp : ValueTypes.CelsiusTemperature,
			targetTemp : ValueTypes.CelsiusTemperature ) : ( cmds : ValueTypes.Commands
			) {
				equation = 
					averageTemp < targetTemp ? 
						('cmds.Heater' == 'ValueTypes.Command::On' && 'cmds.Cooler' == 'ValueTypes.Command::Off') : 
					averageTemp > targetTemp ? 
						('cmds.Heater' == 'ValueTypes.Command::Off' && 'cmds.Cooler' == 'ValueTypes.Command::On') : 
						('cmds.Heater' == 'ValueTypes.Command::Off' && 'cmds.Cooler' == 'ValueTypes.Command::Off') 
			}
		action def CommandHeaterAN ( cmds : ValueTypes.Commands ) : ValueTypes.Command
			{
			post-condition CommandHeaterEQ ( ) delegate CommandHeaterAN to
				CommandHeaterEQ.c delegate cmds to CommandHeaterEQ.cmds
			}
			action def CommandCoolerAN ( cmds : ValueTypes.Commands ) :
			ValueTypes.Command {
			post-condition CommandCoolerEQ ( ) delegate cmds to CommandCoolerEQ.cmds
				delegate CommandCoolerAN to CommandCoolerEQ.c
			}
		constraint CommandHeaterEQ ( cmds : ValueTypes.Commands ) : ( c :
			ValueTypes.Command ) {
				equation = 'cmds.Heater' == 'ValueTypes.Command::On' ? 'c == ValueTypes.Command::On' : 'c == ValueTypes.Command::Off'
			}
		constraint CommandCoolerEQ ( cmds : ValueTypes.Commands ) : ( c :
			ValueTypes.Command ) {
				equation = 'cmds.Cooler' == 'ValueTypes.Command::On' ? 'c == ValueTypes.Command::On' : 'c == ValueTypes.Command::Off'
			}
		constraint FahrenheitToCelsiusEQ ( f : ValueTypes.FahrenheitTemperature ) : (
			c : ValueTypes.CelsiusTemperature ) {
				equation = c == 5*(f-32)/9
			}
		}
		package Ports {
		import ValueTypes;
			import SysADL.types;
			port def FTemperatureOPT {
				flow out ValueTypes.FahrenheitTemperature
			}
			port def CTemperatureOPT {
				flow out ValueTypes.CelsiusTemperature
			}
			port def CTemperatureIPT {
				flow in ValueTypes.CelsiusTemperature
			}
			port def CommandIPT {
				flow in ValueTypes.Command
			}
			port def CommandOPT {
				flow out ValueTypes.Command
			}
			port def PresenceIPT {
				flow in SysADL.types.Boolean
			}
			port def PresenceOPT {
				flow out SysADL.types.Boolean
			}
		}
		package Connectors {
			import Ports;
			import ValueTypes;
			connector def FahrenheitToCelsiusCN {
			participants ~ source : Ports.FTemperatureOPT {
				}
				~ destination : Ports.CTemperatureIPT {
				}
				flows ValueTypes.Temperature from source to destination
			}
			connector def CTemperatureCN {
				participants ~ source : Ports.CTemperatureOPT {
				}
				~ destination : Ports.CTemperatureIPT {
				}
				flows ValueTypes.Temperature from source to destination
			}
			connector def DetectPresenceCN {
				participants ~ source : Ports.PresenceOPT {
				}
				~ destination : Ports.PresenceOPT {
				}
				flows SysADL.types.Boolean from source to destination
			}
			connector def ControlCommandCN {
				participants ~ source : Ports.CommandOPT {
				}
				~ destination : Ports.CommandIPT {
				}
				flows ValueTypes.Command from source to destination
			}
		}